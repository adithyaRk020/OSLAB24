#include <stdio.h>
typedef struct {
 int pid;
 int burst_time;
 int waiting_time;
 int turnaround_time;
} Process;
void find_waiting_time(Process proc[], int n) {
 proc[0].waiting_time = 0; // First process has no waiting time
 for (int i = 1; i < n; i++) {
 proc[i].waiting_time = proc[i - 1].waiting_time + proc[i - 1].burst_time;
6
 }
}
void find_turnaround_time(Process proc[], int n) {
 for (int i = 0; i < n; i++) {
 proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
 }
}
void sort_by_burst_time(Process proc[], int n) {
 for (int i = 0; i < n - 1; i++) {
 for (int j = 0; j < n - i - 1; j++) {
 if (proc[j].burst_time > proc[j + 1].burst_time) {
 Process temp = proc[j];
 proc[j] = proc[j + 1];
 proc[j + 1] = temp;
 }
 }
 }
}
void find_avg_time(Process proc[], int n) {
 int total_wt = 0, total_tat = 0;
 find_waiting_time(proc, n);
 find_turnaround_time(proc, n);
 printf("Processes Burst Time Waiting Time Turnaround Time\n");
 for (int i = 0; i < n; i++) {
 total_wt += proc[i].waiting_time;
 total_tat += proc[i].turnaround_time;
7
 printf("%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time, proc[i].waiting_time,
proc[i].turnaround_time);
 }
 printf("\nAverage waiting time = %.2f", (float) total_wt / (float) n);
 printf("\nAverage turnaround time = %.2f\n", (float) total_tat / (float) n);
}
int main() {
 int n;
 printf("Enter number of processes: ");
 scanf("%d", &n);
 Process proc[n];
 for (int i = 0; i < n; i++) {
 printf("Enter burst time for process %d: ", i + 1);
 proc[i].pid = i + 1;
 scanf("%d", &proc[i].burst_time);
 }
 sort_by_burst_time(proc, n);
 find_avg_time(proc, n);
 return 0;
} 
