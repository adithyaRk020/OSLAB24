#include <stdio.h>
#include <stdbool.h>

#define P 5
#define R 3

int available[R] = {3, 3, 2};
int allocation[P][R] = {
    {0, 1, 0},
    {2, 0, 0},
    {3, 0, 2},
    {2, 1, 1},
    {0, 0, 2}
};
int request[P][R] = {
    {0, 0, 0},
    {2, 0, 2},
    {0, 0, 0},
    {1, 0, 0},
    {0, 0, 2}
};

bool isDeadlocked() {
    bool finish[P] = {false};
    int work[R];
    for (int i = 0; i < R; i++) {
        work[i] = available[i];
    }

    while (true) {
        bool found = false;
        for (int i = 0; i < P; i++) {
            if (!finish[i]) {
                bool possible = true;
                for (int j = 0; j < R; j++) {
                    if (request[i][j] > work[j]) {
                        possible = false;
                        break;
                    }
                }
                if (possible) {
                    for (int j = 0; j < R; j++) {
                        work[j] += allocation[i][j];
                    }
                    finish[i] = true;
                    found = true;
                }
            }
        }
        if (!found) {
            break;
        }
    }

    for (int i = 0; i < P; i++) {
        if (!finish[i]) {
            return true;
        }
    }
    return false;
}

int main() {
    if (isDeadlocked()) {
        printf("Deadlock detected in the system.\n");
    } else {
        printf("No deadlock in the system.\n");
    }

    return 0;
}
