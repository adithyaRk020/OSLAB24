#include <stdio.h>
#include <stdbool.h>

#define NUM_FRAMES 3
#define NUM_PAGES 10

int frames[NUM_FRAMES];
int page_queue[NUM_PAGES];
int page_index = 0;

void initializeFrames() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        frames[i] = -1;
    }
}

void displayFrames() {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == -1) {
            printf("[ ] ");
        } else {
            printf("[%d] ", frames[i]);
        }
    }
    printf("\n");
}

bool isInFrames(int page) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == page) {
            return true;
        }
    }
    return false;
}

int getIndexOfPage(int page) {
    for (int i = 0; i < NUM_FRAMES; i++) {
        if (frames[i] == page) {
            return i;
        }
    }
    return -1;
}

int getLRUPage() {
    int min_index = 0;
    for (int i = 1; i < NUM_FRAMES; i++) {
        if (page_queue[frames[i]] < page_queue[frames[min_index]]) {
            min_index = i;
        }
    }
    return min_index;
}

void fifo(int pages[NUM_PAGES]) {
    initializeFrames();
    int page_faults = 0;

    for (int i = 0; i < NUM_PAGES; i++) {
        int page = pages[i];
        if (!isInFrames(page)) {
            frames[page_index] = page;
            page_index = (page_index + 1) % NUM_FRAMES;
            page_faults++;
        }
        displayFrames();
    }

    printf("FIFO Total Page Faults: %d\n", page_faults);
}

void lru(int pages[NUM_PAGES]) {
    initializeFrames();
    int page_faults = 0;

    for (int i = 0; i < NUM_PAGES; i++) {
        int page = pages[i];
        page_queue[page]++;
        if (!isInFrames(page)) {
            int lru_index = getLRUPage();
            frames[lru_index] = page;
            page_faults++;
        }
        displayFrames();
    }

    printf("LRU Total Page Faults: %d\n", page_faults);
}

int findOptimal(int pages[NUM_PAGES], int start) {
    int index = -1, farthest = start;
    for (int i = 0; i < NUM_FRAMES; i++) {
        int j;
        for (j = start; j < NUM_PAGES; j++) {
            if (frames[i] == pages[j]) {
                if (j > farthest) {
                    farthest = j;
                    index = i;
                }
                break;
            }
        }
        if (j == NUM_PAGES) {
            return i;
        }
    }
    return (index == -1) ? 0 : index;
}

void optimal(int pages[NUM_PAGES]) {
    initializeFrames();
    int page_faults = 0;

    for (int i = 0; i < NUM_PAGES; i++) {
        int page = pages[i];
        if (!isInFrames(page)) {
            int replace_index = findOptimal(pages, i + 1);
            frames[replace_index] = page;
            page_faults++;
        }
        displayFrames();
    }

    printf("Optimal Total Page Faults: %d\n", page_faults);
}

int main() {
    int pages[NUM_PAGES] = {1, 2, 3, 4, 1, 2, 5, 1, 2, 3};

    printf("Page Reference String: ");
    for (int i = 0; i < NUM_PAGES; i++) {
        printf("%d ", pages[i]);
    }
    printf("\n\n");

    printf("FIFO Page Replacement:\n");
    fifo(pages);
    printf("\n");

    printf("LRU Page Replacement:\n");
    lru(pages);
    printf("\n");

    printf("Optimal Page Replacement:\n");
    optimal(pages);
    printf("\n");

    return 0;
}

