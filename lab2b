#include <stdio.h>
typedef struct {
 int pid;
 int burst_time;
 int remaining_time;
 int waiting_time;
 int turnaround_time;
} Process;
void find_waiting_time_rr(Process proc[], int n, int quantum) {
 int t = 0; // Current time
 int remain = n; // Number of processes remaining
 while (remain != 0) {
 for (int i = 0; i < n; i++) {
 if (proc[i].remaining_time > 0) {
 if (proc[i].remaining_time > quantum) {
 t += quantum;
13
 proc[i].remaining_time -= quantum;
 } else {
 t += proc[i].remaining_time;
 proc[i].waiting_time = t - proc[i].burst_time;
 proc[i].remaining_time = 0;
 remain--;
 }
 }
 }
 }
}
void find_turnaround_time_rr(Process proc[], int n) {
 for (int i = 0; i < n; i++) {
 proc[i].turnaround_time = proc[i].burst_time + proc[i].waiting_time;
 }
}
void find_avg_time_rr(Process proc[], int n, int quantum) {
 int total_wt = 0, total_tat = 0;
 find_waiting_time_rr(proc, n, quantum);
 find_turnaround_time_rr(proc, n);
 printf("Processes Burst Time Waiting Time Turnaround Time\n");
 for (int i = 0; i < n; i++) {
 total_wt += proc[i].waiting_time;
 total_tat += proc[i].turnaround_time;
 printf("%d\t\t%d\t\t%d\t\t%d\n", proc[i].pid, proc[i].burst_time,
proc[i].waiting_time, proc[i].turnaround_time);
 }
 printf("\nAverage waiting time = %.2f", (float) total_wt / (float) n);
 printf("\nAverage turnaround time = %.2f\n", (float) total_tat / (float) n);
}
int main() {
 int n, quantum;
 printf("Enter number of processes: ");
 scanf("%d", &n);
 Process proc[n];
 for (int i = 0; i < n; i++) {
 printf("Enter burst time for process %d: ", i + 1);
 proc[i].pid = i + 1;
 scanf("%d", &proc[i].burst_time);
 proc[i].remaining_time = proc[i].burst_time;
14
 }
 printf("Enter time quantum: ");
 scanf("%d", &quantum);
 find_avg_time_rr(proc, n, quantum);
 return 0;
}
